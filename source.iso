type nat      = mu x. 1 + x
type nat_list = mu x. 1 + nat * x

program : nat_list * nat =
  let zero : nat      = fl () in
  let nil  : nat_list = fl () in

  (fix len. iso
  | fl ()     <-> (fl (), fl ())
  | fr (h, t) <->
      let (t', n) : nat_list * nat = len (t : nat_list) in
      (fr (h, t'), fr n)
  end) (fr (zero, fr(zero, fr (zero, nil))) : nat_list)

