type nat      = \x. 1 + x
type nat_list = \x. 1 + nat * x

program : nat_list =
  let 0     : nat      = fl ()                       in
  let 3     : nat      = fr fr fr 0                  in
  let nil   : nat_list = fl ()                       in
  let 3_0's : nat_list = fr (0, fr (0, fr (0, nil))) in

  (invert fix len. iso
  | fl ()     <-> (fl (), fl ())
  | fr (h, t) <->
      let (t', n) : nat_list * nat = len (t : nat_list) in
      (fr (h, t'), fr n)
  end) ((3_0's, 3) : nat_list * nat)

