type nat      = \x. 1 + x
type nat_list = \x. 1 + (\x. 1 + x) * x

program : nat_list * nat =
  (
    fix len.
    iso
      | fold injl ()     <-> (fold injl (), fold injl ())
      | fold injr (h, t) <->
          let (t', n) : nat_list * nat = len (t : nat_list) in
          (fold injr (h, t'), fold injr n)
    end
  ) (fold injr (fold injr ((), fold injl ())) : nat_list)
